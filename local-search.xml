<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>不用插件实现一键复制功能</title>
    <link href="/2022/03/02/%E4%B8%8D%E7%94%A8%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/03/02/%E4%B8%8D%E7%94%A8%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一键复制功能有很多的插件可以实现，本次分享一下不借助插件实现该功能，话不多说，直接上代码</p><h2 id="代码在这"><a href="#代码在这" class="headerlink" title="代码在这"></a>代码在这</h2><figure class="highlight stata"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 复制功能</span><br>   <span class="hljs-keyword">const</span> handleCopyText = (CopyTextData) =&gt; &#123;<br>     let <span class="hljs-keyword">Input</span> = document.createElement(<span class="hljs-string">&quot;input&quot;</span>); <span class="hljs-comment">//创建一个隐藏input（重要！）</span><br>     <span class="hljs-keyword">Input</span>.style.<span class="hljs-keyword">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<span class="hljs-comment">//设置隐藏</span><br>     <span class="hljs-keyword">Input</span>.value = CopyTextData; <span class="hljs-comment">//赋上要复制的值</span><br>     document.body.appendChild(<span class="hljs-keyword">Input</span>);<br>     <span class="hljs-keyword">Input</span>.select(); <span class="hljs-comment">// 选择对象</span><br>     try &#123;<br>       <span class="hljs-keyword">if</span> (document.execCommand(<span class="hljs-string">&quot;Copy&quot;</span>)) &#123;<br>         document.execCommand(<span class="hljs-string">&quot;Copy&quot;</span>); <span class="hljs-comment">// 执行浏览器复制命令</span><br>         ElMessage(&#123;<br>           <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>           message: <span class="hljs-string">&quot;复制成功&quot;</span>,<br>         &#125;);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         ElMessage(&#123;<br>           <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>           message: <span class="hljs-string">&quot;复制失败，浏览器暂不支持此功能，请升级或更换浏览器&quot;</span>,<br>         &#125;);<br>       &#125;<br>     &#125; catch (<span class="hljs-keyword">error</span>) &#123;<br>       ElMessage(&#123;<br>         <span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>         message: <span class="hljs-string">&quot;复制失败：&quot;</span> + <span class="hljs-keyword">error</span>,<br>       &#125;);<br>     &#125;<br>     <span class="hljs-keyword">Input</span>.remove(); <span class="hljs-comment">//移除dom</span><br>   &#125;;<br></code></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>该方法主要靠document.execCommand(“Copy”)来实现，原理是调用浏览器的复制命令，好了完事，特此记录</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一键复制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Vue Router传值的一些问题</title>
    <link href="/2022/01/08/Router%E4%BC%A0%E5%80%BC%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/08/Router%E4%BC%A0%E5%80%BC%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在写项目期间，频繁用到路由传值，特在此记录路由传值的一些要点，众所周知，VueRouter中传参分为params和query两种传参方式，特于此记录下两者的异同</p><h1 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h1><p>params传参，就好比post请求，其参数不会显示在地址栏中，其用法如下所示</p><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><figure class="highlight dust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- name为组件路由名，params为参数 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;home&#x27;, params: &#123; username: username &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> &#125;&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">data:&#123;<br> username: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">login</span><span class="hljs-params">()</span></span> &#123;<br>  this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.push</span>(&#123;<br>    name: <span class="hljs-string">&#x27;home&#x27;</span>, <br>    params: &#123; username: this<span class="hljs-selector-class">.username</span> &#125;,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><em><strong>注意：使用params传参时必须配合name使用，使用path将无效(亲测)</strong></em></p></blockquote><p><strong>params传参在使用时，如果用户刷新了页面，那么参数则会失效，解决上述问题的办法是使用官方的动态路由，如下所示，在路由配置中添加后置参数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">const routes = [<br>  &#123;<br>   <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/home/:username&#x27;</span>,<br>   <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>   component: Home<br>  &#125;<br></code></pre></td></tr></table></figure><p>如上所示，虽然解决了刷新丢参的问题，但是参数也会显性的展示在地址栏中，像<code>http://localhost:4000/home/admin(参数)</code>这样,因此在实际开发中还是要根据参数的重要性来决定用不用这种方法，好了下面讲一下query传参</p><h3 id="取参"><a href="#取参" class="headerlink" title="取参"></a>取参</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">this</span>.$route.<span class="hljs-keyword">params</span><br></code></pre></td></tr></table></figure><p><strong>注意此处是<code>$route</code>,而非<code>$router</code></strong></p><h1 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h1><h3 id="声明式-1"><a href="#声明式-1" class="headerlink" title="声明式"></a>声明式</h3><p>和params传参仅差属性名不同，将params改为query即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- name为组件路由名，query为参数 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;home&#x27;, query: &#123; username: username &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> &#125;&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="编程式-1"><a href="#编程式-1" class="headerlink" title="编程式"></a>编程式</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">data:&#123;<br> username: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">login</span><span class="hljs-params">()</span></span> &#123;<br>  this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.push</span>(&#123;<br>    name: <span class="hljs-string">&#x27;home&#x27;</span>, <br>    <span class="hljs-comment">//path:&#x27;/home&#x27;,//亲测两者都可以</span><br>    query: &#123; username: this<span class="hljs-selector-class">.username</span> &#125;,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><em><strong>注意：使用query传参时虽然不会有页面刷新参数丢失的问题，但是query传参类似于get传参，其参数会展现在地址栏中，因此实际开发也需要根据参数的重要性来使用合理的传参方法</strong></em></p></blockquote><h3 id="取参-1"><a href="#取参-1" class="headerlink" title="取参"></a>取参</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">this.$route.query<br><span class="hljs-comment">&lt;!-- 注意此处依然是`$route`而非`$router` --&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>补充一点自己在使用query时碰到的问题，传的参数如果是Boolean值，在刷新页面后获得的query参数会变为string类型，比如传参<code>query&#123;isRight:true&#125;</code> 第一次跳转打印console.log(this.$route,query.isRight)的值为<code>true</code>,此时刷新页面再打印出来的值会变为string类型<code>&#39;true&#39;</code>因此我们在传参时应尽量避免直接传递Boolean类型值</strong></p></blockquote><p>（本文完结，感谢阅读）</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://router.vuejs.org/zh/guide/">VueRouter官方教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>vueRouter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vueRouter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3简单入门(更新中)</title>
    <link href="/2021/12/02/vue3%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <url>/2021/12/02/vue3%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vue3出来已经有很长一段时间了，很快vue官网也将默认上线vue3版本了，特此记录一下自己学习的小成果，比较片面零散，更多的会比较一下常用的api在vue2和vue3中有何异同，同时更推荐大家去看官网文档，写此博客是为了让自己在写的过程中重温一下印象更深刻</p><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><figure class="highlight dust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span></span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  name: &#x27;xxx&#x27;,</span><br><span class="hljs-template-variable">  data() &#123;</span><br><span class="hljs-template-variable">    return &#123;</span><br><span class="hljs-template-variable">        //数据</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  &#125;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 生命周期钩子 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 创建前 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  beforeCreate()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 创建时 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  created()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 挂载前 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  beforeMount()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 挂载时 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  mounted() </span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 更新前 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  beforeUpdate()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 更新时 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  updated()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 销毁前 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  beforeDestroy()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="handlebars"><span class="xml">,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 销毁时 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  destroyed()</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">,</span><br><span class="xml">  methods: </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      //方法</span><br><span class="hljs-template-variable">  &#125;</span><span class="xml"></span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-comment">&lt;!-- 组合式api --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">import </span></span></span><span class="xquery">&#123; reactive, toRefs,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted &#125;</span><span class="xml"><span class="javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">  setup () &#123;</span><br><span class="xquery">    const state = reactive(&#123;</span><br><span class="xquery">     <span class="hljs-built_in"> count</span>: <span class="hljs-number">0</span>,</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">    onBeforeMount(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onBeforeMount&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">    onMounted(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onMounted&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">    onBeforeUpdate(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onBeforeUpdate1&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">      onUpdated(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onUpdated&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">    onBeforeUnmount(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onBeforeUnmount&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="javascript">);</span></span><br><span class="javascript"><span class="xml">    </span></span><br><span class="javascript"><span class="xml">    onUnmounted(<span class="hljs-function">() =&gt;</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">      console.log(<span class="hljs-string">&quot;onUnmounted&quot;</span>);</span><br><span class="xquery">    &#125;</span><span class="xml"><span class="handlebars"><span class="xml">);</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  </span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">  <span class="hljs-comment">&lt;!-- 如果没使用setup语法糖的话必须return --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">    return </span></span></span><span class="xquery">&#123;</span><br><span class="xquery">      ...toRefs(state),</span><br><span class="xquery">    &#125;</span><span class="xml"></span><br><span class="xml">  &#125;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>&lt;style<span class="hljs-built_in"> lang</span>=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>如上，单从代码上来看我们不难看出vue3相比vue2，多出了一个setup(),以及少了两生命周期钩子，最大的不同则是vue3使用的组合式API（composition API），下面谈谈这二者的异同</p><h2 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h2><table><thead><tr><th align="center">vue2</th><th align="center">vue3</th></tr></thead><tbody><tr><td align="center">beforeCreate</td><td align="center">包含在setup()</td></tr><tr><td align="center">created</td><td align="center">包含在setup()</td></tr><tr><td align="center">beforeMount</td><td align="center">onBeforeMount</td></tr><tr><td align="center">mounted()</td><td align="center">onMounted()</td></tr><tr><td align="center">beforeUpdate</td><td align="center">onBeforeUpdate</td></tr><tr><td align="center">update</td><td align="center">onUpdate</td></tr><tr><td align="center">beforeDestroy</td><td align="center">onBeforeUnmount</td></tr><tr><td align="center">destroyed</td><td align="center">onUnmounted</td></tr></tbody></table><p>如上所列，在vue2中的beforeCreate和created两个生命周期钩子函数在vue3中是不需要了，用官方文档的话说就是：<code>因为 setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。</code></p><h2 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h2><p>setup()函数接收两个参数，分别是prop和context,官方说明：`setup 函数中的第一个参数是 props。正如在一个标准组件中所期望的那样，setup 函数中的 props 是响应式的，当传入新的 prop 时，它将被更新。</p><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-built_in">String</span><br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(props.title)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>但是，因为 props 是响应式的，你不能使用 ES6 解构，它会消除 prop 的响应性。</p>          </div><p>如果需要解构 prop，可以在 setup 函数中使用 toRefs 函数来完成此操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; title &#125; = toRefs(props)<br><br>  <span class="hljs-built_in">console</span>.log(title.value)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 title 是可选的 prop，则传入的 props 中可能没有 title 。在这种情况下，toRefs 将不会为 title 创建一个 ref 。你需要使用 toRef 替代它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; toRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> title = toRef(props, <span class="hljs-string">&#x27;title&#x27;</span>)<br>  <span class="hljs-built_in">console</span>.log(title.value)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>传递给 setup 函数的第二个参数是 context。context 是一个普通 JavaScript 对象，暴露了其它可能在 setup 中有用的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props, context</span>)</span> &#123;<br>    <span class="hljs-comment">// Attribute (非响应式对象，等同于 $attrs)</span><br>    <span class="hljs-built_in">console</span>.log(context.attrs)<br><br>    <span class="hljs-comment">// 插槽 (非响应式对象，等同于 $slots)</span><br>    <span class="hljs-built_in">console</span>.log(context.slots)<br><br>    <span class="hljs-comment">// 触发事件 (方法，等同于 $emit)</span><br>    <span class="hljs-built_in">console</span>.log(context.emit)<br><br>    <span class="hljs-comment">// 暴露公共 property (函数)</span><br>    <span class="hljs-built_in">console</span>.log(context.expose)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>context 是一个普通的 JavaScript 对象，也就是说，它不是响应式的，这意味着你可以安全地对 context 使用 ES6 解构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props, &#123; attrs, slots, emit, expose &#125;</span>)</span> &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>attrs 和 slots 是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 attrs.x 或 slots.x 的方式引用 property。请注意，与 props 不同，attrs 和 slots 的 property 是非响应式的。如果你打算根据 attrs 或 slots 的更改应用副作用，那么应该在 onBeforeUpdate 生命周期钩子中执行此操作。</p><div class="note note-warning">            <p>在 setup 中你应该避免使用 this，因为它不会找到组件实例。setup 的调用发生在 data property、computed property 或 methods 被解析之前，所以它们无法在 setup 中被获取。</p>          </div><p><strong>setup这一节官方文档言简意赅，我直接发挥cv工程师的技能copy😂</strong></p><h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><p>vue的最大特性之一便是响应式数据，在vue2中响应式的实现原理是通过Object.defineProperty()去实现的，其最低支持到ie8，而vue3则是使用ES6的proxy实现响应式，因此并不兼容ie，所以如果你的项目是需要兼容到ie的，那你只能使用vue2或者让客户换个浏览器了（难以实现）😀</p><h3 id="vue2中响应式"><a href="#vue2中响应式" class="headerlink" title="vue2中响应式"></a>vue2中响应式</h3><p>我们在使用vue2时，通常是把需要响应的数据放在data(){}中，如下所示，通过this.dataA,this.dataB去实现对响应式数据的修改或赋值，vue3与此对比可以说使用方式是大不相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">              <span class="hljs-attr">dataA</span>:<span class="hljs-string">&#x27;响应数据1&#x27;</span>，</span><br><span class="javascript">              <span class="hljs-attr">dataB</span>:<span class="hljs-string">&#x27;响应数据2&#x27;</span></span><br><span class="javascript">          &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="vue3响应式"><a href="#vue3响应式" class="headerlink" title="vue3响应式"></a>vue3响应式</h3><p>在vue3中，提供了两种方式实现响应式，一个是ref，一个是reactive</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象仅有一个 .value property，指向该内部值。也就是说，一个普通变量使用ref()使其成为响应式变量，如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> count = ref(<span class="hljs-number">0</span>)</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(count.value) <span class="hljs-comment">// 0</span></span><br><span class="javascript">        count.value++</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(count.value) <span class="hljs-comment">// 1</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">            count,</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通常我们定义基础类型的响应式会使用ref(),引用类型则使用下面的reactive</p><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><p>返回对象的响应式副本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="computed的使用"><a href="#computed的使用" class="headerlink" title="computed的使用"></a>computed的使用</h2><h3 id="在vue2中"><a href="#在vue2中" class="headerlink" title="在vue2中"></a>在vue2中</h3><p>直接上代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">name</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.xxx+<span class="hljs-built_in">this</span>.xxx</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">myName</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="在vue3中"><a href="#在vue3中" class="headerlink" title="在vue3中"></a>在vue3中</h3><p>该方法可以传入一个函数，默认该函数就是getter，不管getter返回值为一个ref响应式数据还是一个普通变量，数据都是只读不能改变。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>,</span><br><span class="javascript"> <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> name = ref(<span class="hljs-string">&quot;凡夫&quot;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> test = computed(<span class="hljs-function">() =&gt;</span> name.value);</span><br><span class="javascript">    test.value = <span class="hljs-string">&quot;123&quot;</span> <span class="hljs-comment">// 修改无效，只能只读</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果想要修改，传入一个对象set和get函数方法，这样就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>,</span><br><span class="javascript"> <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> name = ref(<span class="hljs-string">&quot;凡夫&quot;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> test = computed(&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> name.value;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> name.value = val;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    test.value = <span class="hljs-string">&quot;123&quot;</span> </span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="watch的使用"><a href="#watch的使用" class="headerlink" title="watch的使用"></a>watch的使用</h2><h2 id="store的使用"><a href="#store的使用" class="headerlink" title="store的使用"></a>store的使用</h2><h2 id="router的使用"><a href="#router的使用" class="headerlink" title="router的使用"></a>router的使用</h2>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于iview框架Modal组件使用的问题</title>
    <link href="/2021/10/25/%E5%85%B3%E4%BA%8Eiview%E6%A1%86%E6%9E%B6Modal%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/25/%E5%85%B3%E4%BA%8Eiview%E6%A1%86%E6%9E%B6Modal%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司开发项目所用前端框架一直是iview，最近在使用iview中Modal组件时遇到了一个问题，特写此贴记录</p><h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p>在页面中引入我司封装好的附件上传组件没有问题，新的需求需要在Modal组件中引入附件上传组件，如下代码所示</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Modal组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Modal</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 我司封装附件上传组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">attachmentModule</span></span><br><span class="hljs-tag">     <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showAttachmentModule&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">:attachmentLists</span>=<span class="hljs-string">&quot;attachmentLists&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">attachmentModule</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Modal</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该组件会在mounted阶段调用接口获取已上传的附件列表，当我们代码写好后，问题来了！组件只会在第一次弹开弹窗的时候生效，也就是说只有在第一次弹窗能调用获取附件的接口，此后都不会调用该接口。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>在知晓没有调用接口的情况下，我们不难猜出，组件在第一遍以后可能没有重新加载mounted阶段，这就意味着dom没有重新渲染，因此我在Modal所在组件mounted生命周期中console.log()了一串字符，保存刷新页面后发现：Modal组件在没有显示弹窗的时候就打印了该字符，也就是说在父组件中Modal已经渲染了一遍，走了一遍生命周期，因此我们可以得出弹窗的显隐应该是v-show(本质是控制dom的visible显隐属性)来控制而非v-if(v-if会动态渲染dom组件)  </p><p>可能有人会说你的附件上传组件用的就是v-if啊 怎么会没有重新渲染呢？因为<code>&lt;Modal&gt;</code>组件没有重新渲染，因此v-if判断条件showAttachmentModule的值自第一遍之后就一直没有改变过，这样自然不会触发附件上传组件的mounted生命周期以调用获取附件接口。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>知晓上述缘由后，我们只需要使附件上传组件在Modal组件调用时重新渲染即可，查看iview官方文档:modal组件提供了on-cancel这个在点击弹窗取消时的回调方法，因此我们在@on-cancle事件里重新赋值showAttachmentModule的值为初始值就解决这个问题啦，如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;<span class="hljs-keyword">template</span>&gt;<br>&lt;Modal<br>      v-model=<span class="hljs-string">&quot;isShow&quot;</span><br>      :mask-closable=<span class="hljs-string">&quot;false&quot;</span><br>      ok-text=<span class="hljs-string">&quot;保存&quot;</span><br>      @on-cancel=<span class="hljs-string">&quot;deleteFormData&quot;</span>    <span class="hljs-comment">//取消回调</span><br>      width=<span class="hljs-string">&quot;80&quot;</span><br>    &gt;<br>&lt;/Modal&gt;<br>&lt;/<span class="hljs-keyword">template</span>&gt;<br><br><br>methods:&#123;<br>    <span class="hljs-comment">// 重置信息</span><br>    <span class="hljs-built_in">deleteFormData</span>() &#123;<br>      <span class="hljs-keyword">this</span>.$refs.addFenDuanForm.<span class="hljs-built_in">resetFields</span>();<br>      <span class="hljs-keyword">this</span>.showAttachmentModule = <span class="hljs-literal">false</span>; <span class="hljs-comment">//重置为初始值</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[^1] <a href="http://v3.iviewui.com/components/modal#API">iview官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>前端框架相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超强Grid网格布局入门</title>
    <link href="/2021/10/14/%E8%B6%85%E5%BC%BAgrid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2021/10/14/%E8%B6%85%E5%BC%BAgrid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是grid网格布局，望文生义，将页面分成一个一个网格状的布局方式称为网格布局，它是目前css布局中最为强大的布局，学会网格布局，将会大幅度减少写css的量，配合vue的组件化开发，将使我们的开发效率更上一层楼。（ps:部分浏览器存在兼容性问题，使用请按需求来）  </p> <div class="note note-secondary">            <p>本文参考了阮一峰老师的博文，阮一峰老师写的非常通俗易懂，本打算直接附上链接供大家自行学习，但是想着写一写博文，有助于自己理解得更透彻，因此还是决定写下这篇博客，文末附上链接，不愿看我写的小伙伴可以直接右边目录跳转至参考资料🤪 </p>          </div> <h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。学习grid布局前，先了解以下概念，助于理解学习😄</p><h3 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h3><p>采用网格布局的区域称为容器，容器内部顶层子元素称为项目</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:grid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上所示，采用了grid布局的div称为容器<code>container</code>，其项目为容器内顶层子元素<code>div</code>，<code>&lt;p&gt;</code>不是顶层子元素，因此不属于该容器的项目<code>item</code>，故<code>display:grid</code>属性不会对<code>&lt;p&gt;&lt;/p&gt;</code>标签生效</p><h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，n行有<span class="label label-warning">n + 1</span>根水平网格线，m列有<span class="label label-warning">m + 1</span>根垂直网格线，比如三行就有四根水平网格线。<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png" alt="网格线"><br>如上图所示是一个4行x4列的网格布局，那么它的网格线就有(4+1)根横向网格线，(4+1)根纵向网格线</p><h3 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h3><p>容器里头的水平区域称为行<code>row</code>,垂直区域称为列<code>column</code><br>结合上面网格线内容，可以得出，n条横/纵网格线生成<code>n-1</code>行/列<br><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032502.png" alt="行/列"><br>如上所示：水平的深色区域就是”行”，垂直的深色区域就是”列”。</p><h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>行与列交叉形成单元格(cell)<br>正常情况下n行m列会形成<code>n × m</code>个单元格<br>如上图网格线内容所示4行4列则形成16个单元格</p><h2 id="容器属性和项目属性"><a href="#容器属性和项目属性" class="headerlink" title="容器属性和项目属性"></a>容器属性和项目属性</h2><p>Grid布局的属性分为两类,一类是定义在容器上的属性称为容器属性，另一类则是定义在项目上的属性称为项目属性。这一块的知识点建议大家先理解透了上面基础概念,再边看<a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">阮老师的博文</a>，<a href="https://jsbin.com/guvivum/edit?html,css,output">边敲代码</a>，这样有助于对属性的作用理解的更透彻,博主这边只对属性做个整理。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><p>对采用Grid网格布局的整个大容器生效的属性</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">display</span>: grid;  <span class="hljs-comment">//设为网格布局（可选inline-grid）</span><br>    grid-template-<span class="hljs-attribute">columns</span>:<span class="hljs-number">120px</span> <span class="hljs-number">120px</span> <span class="hljs-number">120px</span>; <span class="hljs-comment">//设置列宽 可用百分比/fr/repet()函数，具体看阮老师博客</span><br>    grid-template-rows:<span class="hljs-number">150px</span> <span class="hljs-number">150px</span> <span class="hljs-number">150px</span>; <span class="hljs-comment">//设置行高 可用百分比/fr/repet()函数，具体看阮老师博客</span><br>    row-gap: <span class="hljs-number">20px</span>; <span class="hljs-comment">//设置行间距</span><br>    <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">20px</span>; <span class="hljs-comment">//设置列间距</span><br>    &lt;!-- gap:<span class="hljs-number">20px</span>; <span class="hljs-comment">//同时设置行列间距 --&gt;</span><br>    grid-template-areas: <span class="hljs-string">&#x27;a b c&#x27;</span><br>                       <span class="hljs-string">&#x27;d e f&#x27;</span><br>                       <span class="hljs-string">&#x27;g h i&#x27;</span>; <span class="hljs-comment">//区域属性，这块功能强烈建议看阮老师博客，将区域定为9个命名单元格</span><br>    grid-<span class="hljs-attribute">auto</span>-flow:row; <span class="hljs-comment">//项目排列顺序默认row表示先行后列，先横向再纵向，可选值：column</span><br>    justify-items: start | end | center | stretch; <span class="hljs-comment">//设置单元格内容的水平位置（左中右）</span><br>    <span class="hljs-attribute">align-items</span>: start | end | center | stretch; <span class="hljs-comment">//属性设置单元格内容的垂直位置（上中下）。</span><br>    &lt;!-- place-items: start end; <span class="hljs-comment">//以上两属性合并简写 --&gt;</span><br>    <span class="hljs-comment">//整个内容区域在容器里面的水平位置（左中右）</span><br>    <span class="hljs-attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>    <span class="hljs-comment">//整个内容区域在容器里面的垂直位置（上中下）</span><br>    <span class="hljs-attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>    &lt;!-- place-<span class="hljs-attribute">content</span>: space-around space-evenly; <span class="hljs-comment">//以上两属性合并简写  --&gt;</span><br>    grid-<span class="hljs-attribute">auto</span>-rows: <span class="hljs-number">50px</span>; <span class="hljs-comment">//grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</p>          </div><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><p>顾名思义，只对容器内单个项目item生效的属性</p><div class="code-wrapper"><pre><code class="hljs">div .item1&#123;    grid-column-start: 1; //左边框所在的垂直网格线    grid-column-end: 3; //右边框所在的垂直网格线    grid-row-start: 2; //上边框所在的水平网格线    grid-row-end: 4; //下边框所在的水平网格线    &lt;!-- grid-column --&gt;    &lt;!-- grid-row   --&gt;    &lt;!-- 以上合并简写形式  --&gt;    grid-area:a; //属性指定项目放在哪一个区域。和容器属性grid-template-areas搭配使用    justify-self: start | end | center | stretch; //属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。    align-self: start | end | center | stretch; //属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。    &lt;!-- place-self: center center;//以上两属性合并简写 --&gt;&#125;</code></pre></div><p>(本文完结，感谢阅读)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">阮一峰老师grid布局教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid">MDN上的grid布局</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3新特性整理(长期更新总结)</title>
    <link href="/2021/10/12/css3%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"/>
    <url>/2021/10/12/css3%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS3是CSS（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块。<code>(以上摘自百度百科，嘿嘿)</code>本文主要整理部分开发中常用到的css3新特性</p><h2 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1.属性选择器"></a>1.属性选择器</h2><p>以下为css3支持的选择器<br><img src="/img/CSS3img/css3.webp" alt="css3选择器" title="css3选择器"><br>图片来自w3c。这一块建议大家去w3c看<a href="https://www.w3school.com.cn/cssref/css_selectors.asp">(CSS 选择器参考手册)</a>，那里的例子通俗易懂。提供的选择器里面，基本都挺好用的。但是有些不会很常用，比如，<code>:root，:empty，:target，:enabled，:checked</code>。而且几个不推荐使用，网上的说法是性能较差<code>[attribute*=value]，[attribute$=value]，[attribute^=value]</code>，这个我没用过，自行尝试。</p><h2 id="2-过渡效果transition"><a href="#2-过渡效果transition" class="headerlink" title="2.过渡效果transition"></a>2.过渡效果transition</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">transition</span>： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*宽度从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒，0.2秒后执行过渡*/</span><br><span class="hljs-attribute">transition</span>：<span class="hljs-attribute">width</span>,.<span class="hljs-number">5s</span>,ease,.<span class="hljs-number">2s</span><br><br><span class="hljs-comment">/*所有属性从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒*/</span><br><span class="hljs-attribute">transition</span>：all,.<span class="hljs-number">5s</span><br><br><span class="hljs-comment">/*以上为简写，下面为单属性*/</span><br><span class="hljs-attribute">transition-property</span>: width;<br><span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">1s</span>;<br><span class="hljs-attribute">transition-timing-function</span>: linear;<br><span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">2s</span>;<br></code></pre></td></tr></table></figure><h2 id="3-动画animation"><a href="#3-动画animation" class="headerlink" title="3.动画animation"></a>3.动画animation</h2><p>动画分为两部分执行  </p><ul><li>@keyframes定义动画  </li><li>animation开启动画<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">animation</span>：@keyframes定义的动画名称，一个周期花费时间，运动曲线（默认ease），动画延迟（默认<span class="hljs-number">0</span>），播放次数（默认<span class="hljs-number">1</span>），是否反向播放动画（默认normal），是否暂停动画（默认running）<br></code></pre></td></tr></table></figure><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/*定义一个名为logo2-line的动画*/</span><br><span class="hljs-keyword">@keyframes</span> logo2-line &#123;<br>    <span class="hljs-number">0%</span>&#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">180deg</span>);<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-number">100%</span>&#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*执行一次logo2-line动画，运动时间2秒，运动曲线为 linear*/</span><br><span class="hljs-attribute">animation</span>: logo2-line <span class="hljs-number">2s</span> linear;<br><br><span class="hljs-comment">/*2秒后开始执行一次logo2-line动画，运动时间2秒，运动曲线为 linear*/</span><br><span class="hljs-attribute">animation</span>: logo2-line <span class="hljs-number">2s</span> linear <span class="hljs-number">2s</span>;<br><br><span class="hljs-comment">/*无限执行logo2-line动画，每次运动时间2秒，运动曲线为 linear，并且执行反向动画*/</span><br><span class="hljs-attribute">animation</span>: logo2-line <span class="hljs-number">2s</span> linear alternate infinite;<br></code></pre></td></tr></table></figure></li></ul><p>重要属性</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">animation-fill-mode : none | <span class="hljs-type">forwards</span> | <span class="hljs-type">backwards</span> | <span class="hljs-type">both</span>;<br>/*none：不改变默认行为。    <br>forwards ：当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。    <br>backwards：在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。 <br>both：向前和向后填充模式都被应用。  */  <br></code></pre></td></tr></table></figure><p>动画这边只做简单的整理 因为知识点实在太多了，有需要的大哥还请自行<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations">MDN</a>学习  </p><h2 id="4-阴影效果box-shadow"><a href="#4-阴影效果box-shadow" class="headerlink" title="4.阴影效果box-shadow"></a>4.阴影效果box-shadow</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: 水平阴影的位置 垂直阴影的位置 模糊距离 阴影的大小 阴影的颜色 阴影开始方向(默认是从里往外，设置inset就是从外往里)<br></code></pre></td></tr></table></figure><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">box</span>-shadow: <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">5</span>px #<span class="hljs-number">888888</span>;<br></code></pre></td></tr></table></figure><h2 id="5-边框border"><a href="#5-边框border" class="headerlink" title="5.边框border"></a>5.边框border</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">border</span>: 边框的宽度 边框的样式 边框颜色 规定应该从父元素继承<span class="hljs-built_in">border</span>属性的设置(非常用)<br></code></pre></td></tr></table></figure><h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/*设置四边宽度为2px  样式为soild  颜色为#000的边框*/</span><br><span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> soild <span class="hljs-number">#000</span><br><br><span class="hljs-comment">/*单独设置每个方向的边框线，css属性如下*/</span><br><span class="hljs-attribute">border-left</span><br><span class="hljs-attribute">border-top</span><br><span class="hljs-attribute">border-right</span><br><span class="hljs-attribute">border-bottom</span><br></code></pre></td></tr></table></figure><p><strong>常用属性:边框弧度，常用来写圆角边框</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*圆角边框，常用属性*/</span><br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>:定义圆角的大小(可用百分比)<br><br><span class="hljs-comment">/*设置10px的圆角大小*/</span><br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>:10px  <br></code></pre></td></tr></table></figure><h2 id="6-文字相关"><a href="#6-文字相关" class="headerlink" title="6.文字相关"></a>6.文字相关</h2><ul><li><h3 id="文字溢出text-overflow"><a href="#文字溢出text-overflow" class="headerlink" title="文字溢出text-overflow"></a>文字溢出text-overflow</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">text-overflow:溢出内容展示方式(clip/ellipsis);<br></code></pre></td></tr></table></figure><h4 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 溢出内容以裁切的方式展示 */</span><br><span class="hljs-selector-class">.test1</span> &#123;<br>  <span class="hljs-attribute">white-space</span>: nowrap; <br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: clip; <br>&#125;<br><br><span class="hljs-comment">/* 溢出内容以省略号方式展示(常用) */</span><br><span class="hljs-selector-class">.test2</span> &#123;<br>  <span class="hljs-attribute">white-space</span>: nowrap; <br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="文字换行word-break"><a href="#文字换行word-break" class="headerlink" title="文字换行word-break"></a>文字换行word-break</h3><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs glsl">word-<span class="hljs-keyword">break</span>:换行规则(keep-<span class="hljs-built_in">all</span>/<span class="hljs-keyword">break</span>-<span class="hljs-built_in">all</span>)<br></code></pre></td></tr></table></figure><h4 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"> </span><br><span class="css"><span class="hljs-comment">/*keep-all将会在连字符-处打断*/</span></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test1</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>; </span><br><span class="css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="css">  <span class="hljs-attribute">word-break</span>: keep-all;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-comment">/*break-all任意字符处打断*/</span></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test2</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>; </span><br><span class="css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="css">  <span class="hljs-attribute">word-break</span>: break-all;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>word-break 属性<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>看什么看-干嘛瞪着眼睛看着我<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>看什么看-干嘛瞪着眼睛看着我<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注释：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>Opera 12 和更早版本不支持 word-break 属性。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="书写模式writing-mode"><a href="#书写模式writing-mode" class="headerlink" title="书写模式writing-mode"></a>书写模式writing-mode</h3><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">writing-<span class="hljs-keyword">mode</span>:书写模式(horizontal-tb/<span class="hljs-keyword">vertical</span>-rl)<br></code></pre></td></tr></table></figure><h4 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"> </span><br><span class="css"><span class="hljs-comment">/*标准模式，自左向右横向书写*/</span></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test1</span> &#123;</span><br><span class="css">  writing-mode: horizontal-tb; </span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.test2</span> &#123;</span><br><span class="css">  writing-mode: vertical-rl; </span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-comment">/*纵向模式自上而下书写*/</span></span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test2</span> &#123;</span><br><span class="css">  writing-mode: vertical-rl; </span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>writing-mode 属性<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>Some text with default writing-mode.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Some text with a span element with a <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>vertical-rl<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> writing-mode.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>Some text with writing-mode: vertical-rl.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="固定行数加省略-常用"><a href="#固定行数加省略-常用" class="headerlink" title="固定行数加省略(常用)"></a>固定行数加省略(常用)</h3><h4 id="举例-7"><a href="#举例-7" class="headerlink" title="举例"></a>举例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;（添加省略号）<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  -webkit-line-clamp: <span class="hljs-number">2</span>;（控制文本行数）<br>  -webkit-box-orient: vertical;（子元素排列方式）<br>&#125;<br><span class="hljs-comment">/*如果你标签内的是英文，英文是不会自动换行的，所以你需要让他自动换行添加如下代码：*/</span><br><span class="hljs-attribute">word-wrap</span>:break-word;<br><span class="hljs-attribute">word-break</span>:break-all;<br></code></pre></td></tr></table></figure><h2 id="7-待补充"><a href="#7-待补充" class="headerlink" title="7.待补充"></a>7.待补充</h2></li></ul><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN上的CSS教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.w3school.com.cn/cssref/css_selectors.asp">W3C上的css3选择器</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法入门</title>
    <link href="/2021/10/09/markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <url>/2021/10/09/markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基础语法使用"><a href="#Markdown基础语法使用" class="headerlink" title="Markdown基础语法使用"></a>Markdown基础语法使用</h1><p>网上找到了个人认为最适合新手的<a href="https://markdown.com.cn/basic-syntax/"><strong>Markdown教程</strong></a>，故不自己写了</p>]]></content>
    
    
    <categories>
      
      <category>标记语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
